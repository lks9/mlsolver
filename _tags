# OASIS_START
# DO NOT EDIT (digest: 7dac7446a1f1dc21f6137a7661fa831e)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library mlsolver
"src/mlsolver.cmxs": use_mlsolver
<src/*.ml{,i,y}>: package(TCSLib)
<src/*.ml{,i,y}>: package(extlib)
<src/*.ml{,i,y}>: package(minisat)
<src/*.ml{,i,y}>: package(num)
<src/*.ml{,i,y}>: package(ocaml-sat-solvers)
<src/*.ml{,i,y}>: package(pgsolver)
<src/*.ml{,i,y}>: package(str)
<src/automata/*.ml{,i,y}>: package(TCSLib)
<src/automata/*.ml{,i,y}>: package(extlib)
<src/automata/*.ml{,i,y}>: package(minisat)
<src/automata/*.ml{,i,y}>: package(num)
<src/automata/*.ml{,i,y}>: package(ocaml-sat-solvers)
<src/automata/*.ml{,i,y}>: package(pgsolver)
<src/automata/*.ml{,i,y}>: package(str)
<src/automata/ctl/*.ml{,i,y}>: package(TCSLib)
<src/automata/ctl/*.ml{,i,y}>: package(extlib)
<src/automata/ctl/*.ml{,i,y}>: package(minisat)
<src/automata/ctl/*.ml{,i,y}>: package(num)
<src/automata/ctl/*.ml{,i,y}>: package(ocaml-sat-solvers)
<src/automata/ctl/*.ml{,i,y}>: package(pgsolver)
<src/automata/ctl/*.ml{,i,y}>: package(str)
<src/automata/ctlstar/*.ml{,i,y}>: package(TCSLib)
<src/automata/ctlstar/*.ml{,i,y}>: package(extlib)
<src/automata/ctlstar/*.ml{,i,y}>: package(minisat)
<src/automata/ctlstar/*.ml{,i,y}>: package(num)
<src/automata/ctlstar/*.ml{,i,y}>: package(ocaml-sat-solvers)
<src/automata/ctlstar/*.ml{,i,y}>: package(pgsolver)
<src/automata/ctlstar/*.ml{,i,y}>: package(str)
<src/automata/lmmc/*.ml{,i,y}>: package(TCSLib)
<src/automata/lmmc/*.ml{,i,y}>: package(extlib)
<src/automata/lmmc/*.ml{,i,y}>: package(minisat)
<src/automata/lmmc/*.ml{,i,y}>: package(num)
<src/automata/lmmc/*.ml{,i,y}>: package(ocaml-sat-solvers)
<src/automata/lmmc/*.ml{,i,y}>: package(pgsolver)
<src/automata/lmmc/*.ml{,i,y}>: package(str)
<src/automata/ltmc/*.ml{,i,y}>: package(TCSLib)
<src/automata/ltmc/*.ml{,i,y}>: package(extlib)
<src/automata/ltmc/*.ml{,i,y}>: package(minisat)
<src/automata/ltmc/*.ml{,i,y}>: package(num)
<src/automata/ltmc/*.ml{,i,y}>: package(ocaml-sat-solvers)
<src/automata/ltmc/*.ml{,i,y}>: package(pgsolver)
<src/automata/ltmc/*.ml{,i,y}>: package(str)
<src/automata/mmc/*.ml{,i,y}>: package(TCSLib)
<src/automata/mmc/*.ml{,i,y}>: package(extlib)
<src/automata/mmc/*.ml{,i,y}>: package(minisat)
<src/automata/mmc/*.ml{,i,y}>: package(num)
<src/automata/mmc/*.ml{,i,y}>: package(ocaml-sat-solvers)
<src/automata/mmc/*.ml{,i,y}>: package(pgsolver)
<src/automata/mmc/*.ml{,i,y}>: package(str)
<src/automata/pdl/*.ml{,i,y}>: package(TCSLib)
<src/automata/pdl/*.ml{,i,y}>: package(extlib)
<src/automata/pdl/*.ml{,i,y}>: package(minisat)
<src/automata/pdl/*.ml{,i,y}>: package(num)
<src/automata/pdl/*.ml{,i,y}>: package(ocaml-sat-solvers)
<src/automata/pdl/*.ml{,i,y}>: package(pgsolver)
<src/automata/pdl/*.ml{,i,y}>: package(str)
<src/pgsolvers/*.ml{,i,y}>: package(TCSLib)
<src/pgsolvers/*.ml{,i,y}>: package(extlib)
<src/pgsolvers/*.ml{,i,y}>: package(minisat)
<src/pgsolvers/*.ml{,i,y}>: package(num)
<src/pgsolvers/*.ml{,i,y}>: package(ocaml-sat-solvers)
<src/pgsolvers/*.ml{,i,y}>: package(pgsolver)
<src/pgsolvers/*.ml{,i,y}>: package(str)
# Executable mlsolver-bin
"src/mlsolver/mlsolver.byte": package(TCSLib)
"src/mlsolver/mlsolver.byte": package(extlib)
"src/mlsolver/mlsolver.byte": package(minisat)
"src/mlsolver/mlsolver.byte": package(num)
"src/mlsolver/mlsolver.byte": package(ocaml-sat-solvers)
"src/mlsolver/mlsolver.byte": package(pgsolver)
"src/mlsolver/mlsolver.byte": package(str)
"src/mlsolver/mlsolver.byte": use_mlsolver
<src/mlsolver/*.ml{,i,y}>: package(TCSLib)
<src/mlsolver/*.ml{,i,y}>: package(extlib)
<src/mlsolver/*.ml{,i,y}>: package(minisat)
<src/mlsolver/*.ml{,i,y}>: package(num)
<src/mlsolver/*.ml{,i,y}>: package(ocaml-sat-solvers)
<src/mlsolver/*.ml{,i,y}>: package(pgsolver)
<src/mlsolver/*.ml{,i,y}>: package(str)
<src/mlsolver/*.ml{,i,y}>: use_mlsolver
# Executable guarded_trafo_worst_case-bin
"src/tools/guarded_trafo_worst_case.byte": package(TCSLib)
"src/tools/guarded_trafo_worst_case.byte": package(extlib)
"src/tools/guarded_trafo_worst_case.byte": package(minisat)
"src/tools/guarded_trafo_worst_case.byte": package(num)
"src/tools/guarded_trafo_worst_case.byte": package(ocaml-sat-solvers)
"src/tools/guarded_trafo_worst_case.byte": package(pgsolver)
"src/tools/guarded_trafo_worst_case.byte": package(str)
"src/tools/guarded_trafo_worst_case.byte": use_mlsolver
<src/tools/*.ml{,i,y}>: package(TCSLib)
<src/tools/*.ml{,i,y}>: package(extlib)
<src/tools/*.ml{,i,y}>: package(minisat)
<src/tools/*.ml{,i,y}>: package(num)
<src/tools/*.ml{,i,y}>: package(ocaml-sat-solvers)
<src/tools/*.ml{,i,y}>: package(pgsolver)
<src/tools/*.ml{,i,y}>: package(str)
<src/tools/*.ml{,i,y}>: use_mlsolver
# Executable ctlstarsudoku-bin
"src/generators/ctlstarsudoku.byte": package(TCSLib)
"src/generators/ctlstarsudoku.byte": package(extlib)
"src/generators/ctlstarsudoku.byte": package(minisat)
"src/generators/ctlstarsudoku.byte": package(num)
"src/generators/ctlstarsudoku.byte": package(ocaml-sat-solvers)
"src/generators/ctlstarsudoku.byte": package(pgsolver)
"src/generators/ctlstarsudoku.byte": package(str)
"src/generators/ctlstarsudoku.byte": use_mlsolver
# Executable elevatorts-bin
"src/generators/elevatorts.byte": package(TCSLib)
"src/generators/elevatorts.byte": package(extlib)
"src/generators/elevatorts.byte": package(minisat)
"src/generators/elevatorts.byte": package(num)
"src/generators/elevatorts.byte": package(ocaml-sat-solvers)
"src/generators/elevatorts.byte": package(pgsolver)
"src/generators/elevatorts.byte": package(str)
"src/generators/elevatorts.byte": use_mlsolver
# Executable ltmcparitybuechi-bin
"src/generators/ltmcparitybuechi.byte": package(TCSLib)
"src/generators/ltmcparitybuechi.byte": package(extlib)
"src/generators/ltmcparitybuechi.byte": package(minisat)
"src/generators/ltmcparitybuechi.byte": package(num)
"src/generators/ltmcparitybuechi.byte": package(ocaml-sat-solvers)
"src/generators/ltmcparitybuechi.byte": package(pgsolver)
"src/generators/ltmcparitybuechi.byte": package(str)
"src/generators/ltmcparitybuechi.byte": use_mlsolver
# Executable mucalcsudoku-bin
"src/generators/mucalcsudoku.byte": package(TCSLib)
"src/generators/mucalcsudoku.byte": package(extlib)
"src/generators/mucalcsudoku.byte": package(minisat)
"src/generators/mucalcsudoku.byte": package(num)
"src/generators/mucalcsudoku.byte": package(ocaml-sat-solvers)
"src/generators/mucalcsudoku.byte": package(pgsolver)
"src/generators/mucalcsudoku.byte": package(str)
"src/generators/mucalcsudoku.byte": use_mlsolver
# Executable pdlsudoku-bin
"src/generators/pdlsudoku.byte": package(TCSLib)
"src/generators/pdlsudoku.byte": package(extlib)
"src/generators/pdlsudoku.byte": package(minisat)
"src/generators/pdlsudoku.byte": package(num)
"src/generators/pdlsudoku.byte": package(ocaml-sat-solvers)
"src/generators/pdlsudoku.byte": package(pgsolver)
"src/generators/pdlsudoku.byte": package(str)
"src/generators/pdlsudoku.byte": use_mlsolver
# Executable philosophersts-bin
"src/generators/philosophersts.byte": package(TCSLib)
"src/generators/philosophersts.byte": package(extlib)
"src/generators/philosophersts.byte": package(minisat)
"src/generators/philosophersts.byte": package(num)
"src/generators/philosophersts.byte": package(ocaml-sat-solvers)
"src/generators/philosophersts.byte": package(pgsolver)
"src/generators/philosophersts.byte": package(str)
"src/generators/philosophersts.byte": use_mlsolver
<src/generators/*.ml{,i,y}>: package(TCSLib)
<src/generators/*.ml{,i,y}>: package(extlib)
<src/generators/*.ml{,i,y}>: package(minisat)
<src/generators/*.ml{,i,y}>: package(num)
<src/generators/*.ml{,i,y}>: package(ocaml-sat-solvers)
<src/generators/*.ml{,i,y}>: package(pgsolver)
<src/generators/*.ml{,i,y}>: package(str)
<src/generators/*.ml{,i,y}>: use_mlsolver
# OASIS_STOP
